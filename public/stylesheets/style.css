/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/** 1. Set default font family to sans-serif. 2. Prevent iOS text size adjust after orientation change, without disabling user zoom. */
html { font-family: sans-serif; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */ }

/** Remove default margin. */
body { margin: 0; }

/* HTML5 display definitions ========================================================================== */
/** Correct `block` display not defined for any HTML5 element in IE 8/9. Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox. Correct `block` display not defined for `main` in IE 11. */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary { display: block; }

/** 1. Correct `inline-block` display not defined in IE 8/9. 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera. */
audio, canvas, progress, video { display: inline-block; /* 1 */ vertical-align: baseline; /* 2 */ }

/** Prevent modern browsers from displaying `audio` without controls. Remove excess height in iOS 5 devices. */
audio:not([controls]) { display: none; height: 0; }

/** Address `[hidden]` styling not present in IE 8/9/10. Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22. */
[hidden], template { display: none; }

/* Links ========================================================================== */
/** Remove the gray background color from active links in IE 10. */
a { background-color: transparent; }

/** Improve readability when focused and also mouse hovered in all browsers. */
a:active, a:hover { outline: 0; }

/* Text-level semantics ========================================================================== */
/** Address styling not present in IE 8/9/10/11, Safari, and Chrome. */
abbr[title] { border-bottom: 1px dotted; }

/** Address style set to `bolder` in Firefox 4+, Safari, and Chrome. */
b, strong { font-weight: bold; }

/** Address styling not present in Safari and Chrome. */
dfn { font-style: italic; }

/** Address variable `h1` font-size and margin within `section` and `article` contexts in Firefox 4+, Safari, and Chrome. */
h1 { font-size: 2em; margin: 0.67em 0; }

/** Address styling not present in IE 8/9. */
mark { background: #ff0; color: #000; }

/** Address inconsistent and variable font size in all browsers. */
small { font-size: 80%; }

/** Prevent `sub` and `sup` affecting `line-height` in all browsers. */
sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

/* Embedded content ========================================================================== */
/** Remove border when inside `a` element in IE 8/9/10. */
img { border: 0; }

/** Correct overflow not hidden in IE 9/10/11. */
svg:not(:root) { overflow: hidden; }

/* Grouping content ========================================================================== */
/** Address margin not present in IE 8/9 and Safari. */
figure { margin: 1em 40px; }

/** Address differences between Firefox and other browsers. */
hr { box-sizing: content-box; height: 0; }

/** Contain overflow in all browsers. */
pre { overflow: auto; }

/** Address odd `em`-unit font size rendering in all browsers. */
code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

/* Forms ========================================================================== */
/** Known limitation: by default, Chrome and Safari on OS X allow very limited styling of `select`, unless a `border` property is set. */
/** 1. Correct color not being inherited. Known issue: affects color of disabled elements. 2. Correct font properties not being inherited. 3. Address margins set differently in Firefox 4+, Safari, and Chrome. */
button, input, optgroup, select, textarea { color: inherit; /* 1 */ font: inherit; /* 2 */ margin: 0; /* 3 */ }

/** Address `overflow` set to `hidden` in IE 8/9/10/11. */
button { overflow: visible; }

/** Address inconsistent `text-transform` inheritance for `button` and `select`. All other form control elements do not inherit `text-transform` values. Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera. Correct `select` style inheritance in Firefox. */
button, select { text-transform: none; }

/** 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio` and `video` controls. 2. Correct inability to style clickable `input` types in iOS. 3. Improve usability and consistency of cursor style between image-type `input` and others. */
button, html input[type="button"], input[type="reset"], input[type="submit"] { -webkit-appearance: button; /* 2 */ cursor: pointer; /* 3 */ }

/** Re-set default cursor for disabled elements. */
button[disabled], html input[disabled] { cursor: default; }

/** Remove inner padding and border in Firefox 4+. */
button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }

/** Address Firefox 4+ setting `line-height` on `input` using `!important` in the UA stylesheet. */
input { line-height: normal; }

/** It's recommended that you don't attempt to style these elements. Firefox's implementation doesn't respect box-sizing, padding, or width. 1. Address box sizing set to `content-box` in IE 8/9/10. 2. Remove excess padding in IE 8/9/10. */
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ }

/** Fix the cursor style for Chrome's increment/decrement buttons. For certain `font-size` values of the `input`, it causes the cursor style of the decrement button to change from `default` to `text`. */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button { height: auto; }

/** 1. Address `appearance` set to `searchfield` in Safari and Chrome. 2. Address `box-sizing` set to `border-box` in Safari and Chrome (include `-moz` to future-proof). */
input[type="search"] { -webkit-appearance: textfield; /* 1 */ /* 2 */ box-sizing: content-box; }

/** Remove inner padding and search cancel button in Safari and Chrome on OS X. Safari (but not Chrome) clips the cancel button when the search input has padding (and `textfield` appearance). */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }

/** Define consistent border, margin, and padding. */
fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; }

/** 1. Correct `color` not being inherited in IE 8/9/10/11. 2. Remove padding so people aren't caught out if they zero out fieldsets. */
legend { border: 0; /* 1 */ padding: 0; /* 2 */ }

/** Remove default vertical scrollbar in IE 8/9/10/11. */
textarea { overflow: auto; }

/** Don't inherit the `font-weight` (applied by a rule above). NOTE: the default cannot safely be changed in Chrome and Safari on OS X. */
optgroup { font-weight: bold; }

/* Tables ========================================================================== */
/** Remove most spacing between table cells. */
table { border-collapse: collapse; border-spacing: 0; }

td, th { padding: 0; }

html { box-sizing: border-box; }

*, *:before, *:after { box-sizing: inherit; }

html, body { min-height: 100%; }

body { font-family: "Source Serif Pro", serif; font-size: 18px; -webkit-font-smoothing: antialiased; line-height: 1.6; color: #20222C; }

a { color: #333; text-decoration: none; }

sup { font-size: 0.8em; }

.page-wrap { max-width: 720px; padding: 20px; margin: 0 auto 80px; }

.button { display: inline-block; padding: 10px 30px; font-size: 16px; line-height: 1; text-align: center; background: transparent; border: 1px solid #aaa; border-radius: 3px; }

.button:hover { border-color: #888; }

.logout { position: fixed; right: 10px; bottom: 10px; }

.message { padding: 10px 0; font-size: 14px; text-align: center; background: #fff; }

.not-authed { background-color: #8891BA; background-image: url("//1feb14f2ae6bd509e324-86b7d0af7bcdc7047f4b69c520d7aac6.r50.cf5.rackcdn.com/scene.jpg"); background-repeat: no-repeat; background-size: cover; }

.login { position: absolute; top: 50%; left: 50%; width: 100px; margin-top: -18px; margin-left: -50px; background: #fff; border: 0; }

.welcome-header { margin-bottom: 60px; }

.welcome-heading { margin: 100px 0 8px; font-weight: normal; text-align: center; }

.welcome-upper { margin-bottom: 10px; font-family: "Source Serif Pro", serif; font-size: 16px; font-weight: normal; letter-spacing: 0.5em; text-transform: uppercase; }

.welcome-text { font-family: "Poppins", sans-serif; font-size: 80px; font-weight: 700; line-height: 1.2; letter-spacing: 0.05em; text-shadow: 1px 1px 0 #fff, 2px 2px 0 #fff, 3px 3px #fff, 4px 4px #ccc; text-transform: uppercase; }

.welcome-text span { display: inline-block; }

.welcome-text span:nth-child(odd) { color: #77AB93; }

.welcome-text span:nth-child(even) { color: #D11F0A; }

.welcome-text span:nth-child(3n) { -webkit-transform: translateY(-4px); transform: translateY(-4px); }

.welcome-text span:nth-child(3n + 1) { -webkit-transform: translateY(4px); transform: translateY(4px); }

.welcome-text span:nth-child(5n) { -webkit-transform: rotate(3deg); transform: rotate(3deg); }

.welcome-text span:nth-child(5n + 1) { -webkit-transform: rotate(-3deg); transform: rotate(-3deg); }

.welcome-subheader { margin: 0 0 60px; font-family: "Source Serif Pro", serif; font-size: 16px; font-weight: normal; letter-spacing: 0.5em; text-align: center; text-transform: uppercase; }

.welcome-blurb { max-width: 400px; margin: 180px auto; font-size: 18px; font-weight: normal; color: #333; text-align: center; }

.question { margin: 60px 0 40px; font-family: "Poppins", sans-serif; font-size: 24px; font-weight: 500; color: #77AB93; text-align: center; }

.choice-button { display: block; width: 300px; padding: 14px 30px; margin: 0 auto 20px; }

.choice-button.no { color: #888; border-color: #ccc; }

.choice-button.no:hover { border-color: #bfbfbf; }

/*# sourceMappingURL=data:application/json;base64, */
