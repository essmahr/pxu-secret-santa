/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/** 1. Set default font family to sans-serif. 2. Prevent iOS text size adjust after orientation change, without disabling user zoom. */
html { font-family: sans-serif; /* 1 */ -ms-text-size-adjust: 100%; /* 2 */ -webkit-text-size-adjust: 100%; /* 2 */ }

/** Remove default margin. */
body { margin: 0; }

/* HTML5 display definitions ========================================================================== */
/** Correct `block` display not defined for any HTML5 element in IE 8/9. Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox. Correct `block` display not defined for `main` in IE 11. */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary { display: block; }

/** 1. Correct `inline-block` display not defined in IE 8/9. 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera. */
audio, canvas, progress, video { display: inline-block; /* 1 */ vertical-align: baseline; /* 2 */ }

/** Prevent modern browsers from displaying `audio` without controls. Remove excess height in iOS 5 devices. */
audio:not([controls]) { display: none; height: 0; }

/** Address `[hidden]` styling not present in IE 8/9/10. Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22. */
[hidden], template { display: none; }

/* Links ========================================================================== */
/** Remove the gray background color from active links in IE 10. */
a { background-color: transparent; }

/** Improve readability when focused and also mouse hovered in all browsers. */
a:active, a:hover { outline: 0; }

/* Text-level semantics ========================================================================== */
/** Address styling not present in IE 8/9/10/11, Safari, and Chrome. */
abbr[title] { border-bottom: 1px dotted; }

/** Address style set to `bolder` in Firefox 4+, Safari, and Chrome. */
b, strong { font-weight: bold; }

/** Address styling not present in Safari and Chrome. */
dfn { font-style: italic; }

/** Address variable `h1` font-size and margin within `section` and `article` contexts in Firefox 4+, Safari, and Chrome. */
h1 { font-size: 2em; margin: 0.67em 0; }

/** Address styling not present in IE 8/9. */
mark { background: #ff0; color: #000; }

/** Address inconsistent and variable font size in all browsers. */
small { font-size: 80%; }

/** Prevent `sub` and `sup` affecting `line-height` in all browsers. */
sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

/* Embedded content ========================================================================== */
/** Remove border when inside `a` element in IE 8/9/10. */
img { border: 0; }

/** Correct overflow not hidden in IE 9/10/11. */
svg:not(:root) { overflow: hidden; }

/* Grouping content ========================================================================== */
/** Address margin not present in IE 8/9 and Safari. */
figure { margin: 1em 40px; }

/** Address differences between Firefox and other browsers. */
hr { box-sizing: content-box; height: 0; }

/** Contain overflow in all browsers. */
pre { overflow: auto; }

/** Address odd `em`-unit font size rendering in all browsers. */
code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

/* Forms ========================================================================== */
/** Known limitation: by default, Chrome and Safari on OS X allow very limited styling of `select`, unless a `border` property is set. */
/** 1. Correct color not being inherited. Known issue: affects color of disabled elements. 2. Correct font properties not being inherited. 3. Address margins set differently in Firefox 4+, Safari, and Chrome. */
button, input, optgroup, select, textarea { color: inherit; /* 1 */ font: inherit; /* 2 */ margin: 0; /* 3 */ }

/** Address `overflow` set to `hidden` in IE 8/9/10/11. */
button { overflow: visible; }

/** Address inconsistent `text-transform` inheritance for `button` and `select`. All other form control elements do not inherit `text-transform` values. Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera. Correct `select` style inheritance in Firefox. */
button, select { text-transform: none; }

/** 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio` and `video` controls. 2. Correct inability to style clickable `input` types in iOS. 3. Improve usability and consistency of cursor style between image-type `input` and others. */
button, html input[type="button"], input[type="reset"], input[type="submit"] { -webkit-appearance: button; /* 2 */ cursor: pointer; /* 3 */ }

/** Re-set default cursor for disabled elements. */
button[disabled], html input[disabled] { cursor: default; }

/** Remove inner padding and border in Firefox 4+. */
button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }

/** Address Firefox 4+ setting `line-height` on `input` using `!important` in the UA stylesheet. */
input { line-height: normal; }

/** It's recommended that you don't attempt to style these elements. Firefox's implementation doesn't respect box-sizing, padding, or width. 1. Address box sizing set to `content-box` in IE 8/9/10. 2. Remove excess padding in IE 8/9/10. */
input[type="checkbox"], input[type="radio"] { box-sizing: border-box; /* 1 */ padding: 0; /* 2 */ }

/** Fix the cursor style for Chrome's increment/decrement buttons. For certain `font-size` values of the `input`, it causes the cursor style of the decrement button to change from `default` to `text`. */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button { height: auto; }

/** 1. Address `appearance` set to `searchfield` in Safari and Chrome. 2. Address `box-sizing` set to `border-box` in Safari and Chrome (include `-moz` to future-proof). */
input[type="search"] { -webkit-appearance: textfield; /* 1 */ /* 2 */ box-sizing: content-box; }

/** Remove inner padding and search cancel button in Safari and Chrome on OS X. Safari (but not Chrome) clips the cancel button when the search input has padding (and `textfield` appearance). */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration { -webkit-appearance: none; }

/** Define consistent border, margin, and padding. */
fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; }

/** 1. Correct `color` not being inherited in IE 8/9/10/11. 2. Remove padding so people aren't caught out if they zero out fieldsets. */
legend { border: 0; /* 1 */ padding: 0; /* 2 */ }

/** Remove default vertical scrollbar in IE 8/9/10/11. */
textarea { overflow: auto; }

/** Don't inherit the `font-weight` (applied by a rule above). NOTE: the default cannot safely be changed in Chrome and Safari on OS X. */
optgroup { font-weight: bold; }

/* Tables ========================================================================== */
/** Remove most spacing between table cells. */
table { border-collapse: collapse; border-spacing: 0; }

td, th { padding: 0; }

.welcome-upper, .welcome-subheader { font-family: "Source Serif Pro", serif; font-size: 16px; font-weight: normal; letter-spacing: 0.5em; text-transform: uppercase; }

html { box-sizing: border-box; }

*, *:before, *:after { box-sizing: inherit; }

html, body { height: 100%; }

body { font-family: "Source Serif Pro", serif; font-size: 18px; -webkit-font-smoothing: antialiased; line-height: 1.6; color: #20222C; text-align: center; }

a { color: #333; text-decoration: none; }

p { margin: 2em 0; }

sup { font-size: 0.8em; }

h1, h2, h3 { margin: 1rem 0; font-family: "Poppins", sans-serif; color: #aaa; }

.page-wrap { display: table; height: 100%; max-width: 720px; margin: 0 auto; }

.page-wrap-inner { display: table-cell; padding: 80px 0; vertical-align: middle; }

.button { display: inline-block; padding: 10px 30px; line-height: 1; text-align: center; background: transparent; border: 1px solid #aaa; border-radius: 3px; }

.button:hover { border-color: #888; }

.button-small { padding: 5px 12px; font-size: 14px; }

.button-faded { color: #888; border-color: #ccc; }

.button-faded:hover { border-color: #bfbfbf; }

.logout { position: fixed; right: 10px; bottom: 10px; font-size: 13px; }

.message { padding: 10px 0; font-size: 14px; text-align: center; background: #fff; }

.state-message { margin-bottom: 10px; font-family: "Poppins", sans-serif; font-size: 24px; font-weight: 600; color: #aaa; }

.small { margin: 0 0 30px; font-size: 14px; color: #666; }

.assigned-img { width: 192px; border-radius: 50%; -webkit-animation-name: image-pop; animation-name: image-pop; -webkit-animation-duration: 0.8s; animation-duration: 0.8s; }

.assigned-name { margin: 10px 0 60px; font-family: "Poppins", sans-serif; font-size: 36px; font-weight: 600; color: #77AB93; -webkit-animation-name: slide-up; animation-name: slide-up; -webkit-animation-duration: 0.8s; animation-duration: 0.8s; -webkit-animation-delay: 0.7s; animation-delay: 0.7s; -webkit-animation-fill-mode: backwards; animation-fill-mode: backwards; }

.assigned-note { max-width: 240px; font-size: 13px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 0.6s; animation-duration: 0.6s; -webkit-animation-delay: 2s; animation-delay: 2s; -webkit-animation-fill-mode: backwards; animation-fill-mode: backwards; }

@-webkit-keyframes image-pop { 0% { -webkit-transform: scale(0); transform: scale(0);
    opacity: 0; }
  100% { -webkit-transform: scale(1); transform: scale(1);
    opacity: 1; } }

@keyframes image-pop { 0% { -webkit-transform: scale(0); transform: scale(0);
    opacity: 0; }
  100% { -webkit-transform: scale(1); transform: scale(1);
    opacity: 1; } }

@-webkit-keyframes slide-up { 0% { -webkit-transform: translateY(30px); transform: translateY(30px);
    opacity: 0; }
  100% { -webkit-transform: translateY(0); transform: translateY(0);
    opacity: 1; } }

@keyframes slide-up { 0% { -webkit-transform: translateY(30px); transform: translateY(30px);
    opacity: 0; }
  100% { -webkit-transform: translateY(0); transform: translateY(0);
    opacity: 1; } }

@-webkit-keyframes fade-in { 0% { opacity: 0; }
  100% { opacity: 1; } }

@keyframes fade-in { 0% { opacity: 0; }
  100% { opacity: 1; } }

.not-authed { background-color: #8891BA; background-image: url("//1feb14f2ae6bd509e324-86b7d0af7bcdc7047f4b69c520d7aac6.r50.cf5.rackcdn.com/scene.jpg"); background-repeat: no-repeat; background-size: cover; }

.login { position: absolute; top: 50%; left: 50%; width: 100px; margin-top: -18px; margin-left: -50px; background: #fff; border: 0; }

.welcome-header { margin-bottom: 60px; }

.welcome-heading { margin: 40px 0 8px; font-weight: normal; }

.welcome-upper { margin-bottom: 10px; }

.welcome-text { font-family: "Poppins", sans-serif; font-size: 80px; font-weight: 700; line-height: 1.2; letter-spacing: 0.05em; text-shadow: 1px 1px 0 #fff, 2px 2px 0 #fff, 3px 3px #fff, 4px 4px #ccc; text-transform: uppercase; }

.welcome-text span { display: inline-block; }

.welcome-text span:nth-child(odd) { color: #77AB93; }

.welcome-text span:nth-child(even) { color: #D11F0A; }

.welcome-text span:nth-child(3n) { -webkit-transform: translateY(-4px); transform: translateY(-4px); }

.welcome-text span:nth-child(3n + 1) { -webkit-transform: translateY(4px); transform: translateY(4px); }

.welcome-text span:nth-child(5n) { -webkit-transform: rotate(3deg); transform: rotate(3deg); }

.welcome-text span:nth-child(5n + 1) { -webkit-transform: rotate(-3deg); transform: rotate(-3deg); }

.welcome-subheader { margin: 0 0 60px; }

.welcome-blurb { max-width: 400px; margin: 180px auto; font-size: 18px; font-weight: normal; color: #333; text-align: center; }

.question { margin: 60px 0 40px; font-family: "Poppins", sans-serif; font-size: 24px; font-weight: 500; color: #77AB93; text-align: center; }

.choice-button { display: block; width: 300px; padding: 14px 30px; margin: 0 auto 20px; }

.form-user-select { text-align: left; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9ub3JtYWxpemUuc2NzcyIsInN0eWxlLmNzcyIsIl93ZWxjb21lLnNjc3MiLCIuLi8uLi9zdGRpbiIsIl9nbG9iYWwuc2NzcyIsIl9sb2dpbi5zY3NzIiwiX2FkbWluLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNERBQTREO0FBRTVELHVJQUlHO0FBRUgsT0FDRSx3QkFBd0IsQ0FBRSxPQUFPLENBQ2pDLDJCQUEyQixDQUFFLE9BQU8sQ0FDcEMsK0JBQStCLENBQUUsT0FBTyxFQUN6Qzs7QUFFRCw2QkFFRztBQUVILE9BQ0UsVUFBVSxFQUNYOztBQUVELDBHQUNnRjtBQUVoRiw0TkFLRztBQUVILHlHQWFFLGVBQWUsRUFDaEI7O0FBRUQsNElBR0c7QUFFSCxpQ0FJRSxzQkFBc0IsQ0FBRSxPQUFPLENBQy9CLHlCQUF5QixDQUFFLE9BQU8sRUFDbkM7O0FBRUQsK0dBR0c7QUFFSCx3QkFDRSxjQUFjLENBQ2QsVUFBVSxFQUNYOztBQUVELCtIQUdHO0FDeERILHFCRDRERSxjQUFjLEVBQ2Y7O0FBRUQsc0ZBQ2dGO0FBRWhGLG1FQUVHO0FBRUgsSUFDRSw4QkFBOEIsRUFDL0I7O0FBRUQsK0VBRUc7QUFFSCxvQkFFRSxXQUFXLEVBQ1o7O0FBRUQscUdBQ2dGO0FBRWhGLHVFQUVHO0FBRUgsY0FDRSwwQkFBMEIsRUFDM0I7O0FBRUQsdUVBRUc7QUFFSCxZQUVFLGtCQUFrQixFQUNuQjs7QUFFRCx3REFFRztBQUVILE1BQ0UsbUJBQW1CLEVBQ3BCOztBQUVELDRIQUdHO0FBRUgsS0FDRSxlQUFlLENBQ2YsaUJBQWlCLEVBQ2xCOztBQUVELDZDQUVHO0FBRUgsT0FDRSxpQkFBaUIsQ0FDakIsWUFBWSxFQUNiOztBQUVELG1FQUVHO0FBRUgsUUFDRSxlQUFlLEVBQ2hCOztBQUVELHVFQUVHO0FBRUgsV0FFRSxlQUFlLENBQ2YsZUFBZSxDQUNmLG1CQUFtQixDQUNuQix5QkFBeUIsRUFDMUI7O0FBRUQsTUFDRSxZQUFZLEVBQ2I7O0FBRUQsTUFDRSxnQkFBZ0IsRUFDakI7O0FBRUQsaUdBQ2dGO0FBRWhGLDBEQUVHO0FBRUgsTUFDRSxVQUFVLEVBQ1g7O0FBRUQsaURBRUc7QUFFSCxpQkFDRSxpQkFBaUIsRUFDbEI7O0FBRUQsaUdBQ2dGO0FBRWhGLHVEQUVHO0FBRUgsU0FDRSxpQkFBaUIsRUFDbEI7O0FBRUQsOERBRUc7QUFFSCxLQUVFLHdCQUF3QixDQUN4QixVQUFVLEVBQ1g7O0FBRUQsd0NBRUc7QUFFSCxNQUNFLGVBQWUsRUFDaEI7O0FBRUQsaUVBRUc7QUFFSCx1QkFJRSxrQ0FBa0MsQ0FDbEMsZUFBZSxFQUNoQjs7QUFFRCxzRkFDZ0Y7QUFFaEYseUlBR0c7QUFFSCxtTkFLRztBQUVILDRDQUtFLGVBQWUsQ0FBRSxPQUFPLENBQ3hCLGNBQWMsQ0FBRSxPQUFPLENBQ3ZCLFVBQVUsQ0FBRSxPQUFPLEVBQ3BCOztBQUVELDBEQUVHO0FBRUgsU0FDRSxrQkFBa0IsRUFDbkI7O0FBRUQsa1JBS0c7QUFFSCxpQkFFRSxxQkFBcUIsRUFDdEI7O0FBRUQsaVFBTUc7QUFFSCwrRUFJRSwyQkFBMkIsQ0FBRSxPQUFPLENBQ3BDLGdCQUFnQixDQUFFLE9BQU8sRUFDMUI7O0FBRUQsbURBRUc7QUFFSCx5Q0FFRSxnQkFBZ0IsRUFDakI7O0FBRUQscURBRUc7QUFFSCxvREFFRSxVQUFVLENBQ1YsV0FBVyxFQUNaOztBQUVELG1HQUdHO0FBRUgsUUFDRSxvQkFBb0IsRUFDckI7O0FBRUQsK09BTUc7QUFFSCw4Q0FFRSx1QkFBdUIsQ0FBRSxPQUFPLENBQ2hDLFdBQVcsQ0FBRSxPQUFPLEVBQ3JCOztBQUVELDJNQUlHO0FBRUgsbUdBRUUsYUFBYSxFQUNkOztBQUVELDRLQUlHO0FBRUgsdUJBQ0UsOEJBQThCLENBQUUsT0FBTyxDQUVMLE9BQU8sQ0FDekMsd0JBQXdCLEVBQ3pCOztBQUVELGtNQUlHO0FBRUgsc0dBRUUseUJBQXlCLEVBQzFCOztBQUVELHFEQUVHO0FBRUgsV0FDRSwwQkFBMEIsQ0FDMUIsY0FBYyxDQUNkLCtCQUErQixFQUNoQzs7QUFFRCx3SUFHRztBQUVILFNBQ0UsVUFBVSxDQUFFLE9BQU8sQ0FDbkIsV0FBVyxDQUFFLE9BQU8sRUFDckI7O0FBRUQseURBRUc7QUFFSCxXQUNFLGVBQWUsRUFDaEI7O0FBRUQsMElBR0c7QUFFSCxXQUNFLGtCQUFrQixFQUNuQjs7QUFFRCx1RkFDZ0Y7QUFFaEYsK0NBRUc7QUFFSCxRQUNFLDBCQUEwQixDQUMxQixrQkFBa0IsRUFDbkI7O0FBRUQsU0FFRSxXQUFXLEVBQ1o7O0FFamFELHFDQ1FFLHVDQWYrQixDQWdCL0IsZ0JBQWdCLENBQ2hCLG9CQUFvQixDQUNwQixzQkFBc0IsQ0FDdEIsMEJBQTBCLEVBQzNCOztBQ3RCRCxPQUFPLHVCQUF1QixFQUFJOztBQUVsQyx1QkFJSSxvQkFBb0IsRUFDckI7O0FBR0gsYUFDTyxhQUFhLEVBQUk7O0FBRXhCLE9BQ0UsdUNEWitCLENDYS9CLGdCQUFnQixDQUNoQixvQ0FBb0MsQ0FDcEMsaUJBQWlCLENBQ2pCLGVBQWUsQ0FDZixtQkFBbUIsRUFDcEI7O0FBRUQsSUFDRSxZQUFZLENBQ1osc0JBQXNCLEVBQ3ZCOztBQUVELElBQUksY0FBYyxFQUFJOztBQUV0QixNQUFNLGlCQUFpQixFQUFJOztBQUUzQixhQUdFLGVBQWUsQ0FDZixtQ0RoQzBCLENDaUMxQixZQUFZLEVBQ2I7O0FBRUQsYUFDRSxlQUFlLENBQ2YsYUFBYSxDQUNiLGlCQUFpQixDQUNqQixlQUFlLEVBQ2hCOztBQUVELG1CQUNFLG9CQUFvQixDQUNwQixnQkFBZ0IsQ0FDaEIsdUJBQXVCLEVBQ3hCOztBQUVELFVBQ0Usc0JBQXNCLENBQ3RCLG1CQUFtQixDQUNuQixlQUFlLENBQ2YsbUJBQW1CLENBQ25CLHdCQUF3QixDQUN4Qix1QkFBdUIsQ0FDdkIsbUJBQW1CLEVBR3BCOztBQVZELGdCQVNZLG1CQUFtQixFQUFJOztBQUduQyxnQkFDRSxrQkFBa0IsQ0FDbEIsZ0JBQWdCLEVBQ2pCOztBQUVELGdCQUNFLFlBQVksQ0FDWixtQkFBbUIsRUFHcEI7O0FBTEQsc0JBSVksc0JBQW9CLEVBQWM7O0FBRzlDLFVBQ0UsZ0JBQWdCLENBQ2hCLFlBQVksQ0FDWixhQUFhLENBQ2IsZ0JBQWdCLEVBQ2pCOztBQUVELFdBQ0UsZ0JBQWdCLENBQ2hCLGdCQUFnQixDQUNoQixtQkFBbUIsQ0FDbkIsaUJBQWlCLEVBQ2xCOztBQUtELGlCQUNFLG9CQUFvQixDQUNwQixtQ0Q1RjBCLENDNkYxQixnQkFBZ0IsQ0FDaEIsaUJBQWlCLENBQ2pCLFlBQVksRUFDYjs7QUFFRCxTQUNFLGlCQUFpQixDQUNqQixnQkFBZ0IsQ0FDaEIsWUFBWSxFQUNiOztBQUVELGdCQUNFLGFBQWEsQ0FDYixtQkFBbUIsQ0FDbkIsa0NBQTBCLENBQTFCLDBCQUEwQixDQUMxQixpQ0FBeUIsQ0FBekIseUJBQXlCLEVBQzFCOztBQUVELGlCQUNFLG9CQUFvQixDQUNwQixtQ0RqSDBCLENDa0gxQixnQkFBZ0IsQ0FDaEIsaUJBQWlCLENBQ2pCLGVEakhhLENDa0hiLGlDQUF5QixDQUF6Qix5QkFBeUIsQ0FDekIsaUNBQXlCLENBQXpCLHlCQUF5QixDQUN6Qiw4QkFBc0IsQ0FBdEIsc0JBQXNCLENBQ3RCLHVDQUErQixDQUEvQiwrQkFBK0IsRUFDaEM7O0FBRUQsaUJBQ0UsaUJBQWlCLENBQ2pCLGdCQUFnQixDQUNoQixnQ0FBd0IsQ0FBeEIsd0JBQXdCLENBQ3hCLGlDQUF5QixDQUF6Qix5QkFBeUIsQ0FDekIsNEJBQW9CLENBQXBCLG9CQUFvQixDQUNwQix1Q0FBK0IsQ0FBL0IsK0JBQStCLEVBQ2hDOztBQUVELCtCQUNFLEtBQ0UsNEJBQWdCLENBQWhCLG9CQUFnQjtJQUNoQixXQUFXLEVBQUE7RUFFYixPQUNFLDRCQUFnQixDQUFoQixvQkFBZ0I7SUFDaEIsV0FBVyxFQUFBLEVBQUE7O0FBUGYsdUJBQ0UsS0FDRSw0QkFBZ0IsQ0FBaEIsb0JBQWdCO0lBQ2hCLFdBQVcsRUFBQTtFQUViLE9BQ0UsNEJBQWdCLENBQWhCLG9CQUFnQjtJQUNoQixXQUFXLEVBQUEsRUFBQTs7QUFJZiw4QkFDRSxLQUNFLG9DQUFxQixDQUFyQiw0QkFBcUI7SUFDckIsV0FBVyxFQUFBO0VBRWIsT0FDRSxpQ0FBcUIsQ0FBckIseUJBQXFCO0lBQ3JCLFdBQVcsRUFBQSxFQUFBOztBQVBmLHNCQUNFLEtBQ0Usb0NBQXFCLENBQXJCLDRCQUFxQjtJQUNyQixXQUFXLEVBQUE7RUFFYixPQUNFLGlDQUFxQixDQUFyQix5QkFBcUI7SUFDckIsV0FBVyxFQUFBLEVBQUE7O0FBSWYsNkJBQ0UsS0FDRSxXQUFXLEVBQUE7RUFFYixPQUNFLFdBQVcsRUFBQSxFQUFBOztBQUxmLHFCQUNFLEtBQ0UsV0FBVyxFQUFBO0VBRWIsT0FDRSxXQUFXLEVBQUEsRUFBQTs7QUNsS2YsY0FDRSwwQkFBMEIsQ0FDMUIsK0dBQXFCLENBQ3JCLDZCQUE2QixDQUM3Qix1QkFBdUIsRUFDeEI7O0FBRUQsU0FDRSxtQkFBbUIsQ0FDbkIsU0FBUyxDQUNULFVBQVUsQ0FDVixhQUFhLENBQ2Isa0JBQWtCLENBQ2xCLG1CQUFtQixDQUNuQixpQkFBaUIsQ0FDakIsVUFBVSxFQUNYOztBSGhCRCxrQkFDRSxvQkFBb0IsRUFDckI7O0FBRUQsbUJBQ0UsbUJBQW1CLENBQ25CLG9CQUFvQixFQUNyQjs7QUFFRCxpQkFFRSxvQkFBb0IsRUFDckI7O0FBRUQsZ0JBQ0UsbUNDWjBCLENEYTFCLGdCQUFnQixDQUNoQixpQkFBaUIsQ0FDakIsaUJBQWlCLENBQ2pCLHVCQUF1QixDQUN2Qix3RUFHMEIsQ0FDMUIsMEJBQTBCLEVBaUIzQjs7QUEzQkQscUJBYUksc0JBQXNCLEVBYXZCOztBQTFCSCxvQ0FldUIsZUN2QlIsRUR1QnlCOztBQWZ4QyxxQ0FpQndCLGVDMUJYLEVEMEIwQjs7QUFqQnZDLG1DQW1Cc0Isb0NBQXFCLENBQXJCLDRCQUFxQixFQUFVOztBQW5CckQsdUNBcUIwQixtQ0FBcUIsQ0FBckIsMkJBQXFCLEVBQVM7O0FBckJ4RCxtQ0F1QnNCLGdDQUFpQixDQUFqQix3QkFBaUIsRUFBVTs7QUF2QmpELHVDQXlCMEIsaUNBQWlCLENBQWpCLHlCQUFpQixFQUFXOztBQUl0RCxxQkFFRSxpQkFBaUIsRUFDbEI7O0FBRUQsaUJBQ0UsaUJBQWlCLENBQ2pCLG1CQUFtQixDQUNuQixnQkFBZ0IsQ0FDaEIsb0JBQW9CLENBQ3BCLFlBQVksQ0FDWixtQkFBbUIsRUFDcEI7O0FBR0QsWUFDRSxvQkFBb0IsQ0FDcEIsbUNDekQwQixDRDBEMUIsZ0JBQWdCLENBQ2hCLGlCQUFpQixDQUNqQixlQ3pEYSxDRDBEYixtQkFBbUIsRUFDcEI7O0FBRUQsaUJBQ0UsZUFBZSxDQUNmLGFBQWEsQ0FDYixtQkFBbUIsQ0FDbkIsb0JBQW9CLEVBS3JCOztBSTVFRCxvQkFDRSxpQkFBaUIsRUFDbEIiLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vcm1hbGl6ZS5jc3MgdjMuMC4yIHwgTUlUIExpY2Vuc2UgfCBnaXQuaW8vbm9ybWFsaXplICovXG5cbi8qKlxuICogMS4gU2V0IGRlZmF1bHQgZm9udCBmYW1pbHkgdG8gc2Fucy1zZXJpZi5cbiAqIDIuIFByZXZlbnQgaU9TIHRleHQgc2l6ZSBhZGp1c3QgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlLCB3aXRob3V0IGRpc2FibGluZ1xuICogICAgdXNlciB6b29tLlxuICovXG5cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjsgLyogMSAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgZGVmYXVsdCBtYXJnaW4uXG4gKi9cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLyogSFRNTDUgZGlzcGxheSBkZWZpbml0aW9uc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYW55IEhUTUw1IGVsZW1lbnQgaW4gSUUgOC85LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBkZXRhaWxzYCBvciBgc3VtbWFyeWAgaW4gSUUgMTAvMTFcbiAqIGFuZCBGaXJlZm94LlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBtYWluYCBpbiBJRSAxMS5cbiAqL1xuXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1haW4sXG5tZW51LFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuICogMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5cbmF1ZGlvLFxuY2FudmFzLFxucHJvZ3Jlc3MsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBQcmV2ZW50IG1vZGVybiBicm93c2VycyBmcm9tIGRpc3BsYXlpbmcgYGF1ZGlvYCB3aXRob3V0IGNvbnRyb2xzLlxuICogUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TIDUgZGV2aWNlcy5cbiAqL1xuXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLlxuICogSGlkZSB0aGUgYHRlbXBsYXRlYCBlbGVtZW50IGluIElFIDgvOS8xMSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuICovXG5cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBMaW5rc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDtcbn1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cblxuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqL1xuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqL1xuXG5tYXJrIHtcbiAgYmFja2dyb3VuZDogI2ZmMDtcbiAgY29sb3I6ICMwMDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYW5kIHZhcmlhYmxlIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuLyoqXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBhZmZlY3RpbmcgYGxpbmUtaGVpZ2h0YCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbWcge1xuICBib3JkZXI6IDA7XG59XG5cbi8qKlxuICogQ29ycmVjdCBvdmVyZmxvdyBub3QgaGlkZGVuIGluIElFIDkvMTAvMTEuXG4gKi9cblxuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpLlxuICovXG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5cbmhyIHtcbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5wcmUge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxuICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICovXG5cbi8qKlxuICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogICAgS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgY29sb3I6IGluaGVyaXQ7IC8qIDEgKi9cbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xuICBtYXJnaW46IDA7IC8qIDMgKi9cbn1cblxuLyoqXG4gKiBBZGRyZXNzIGBvdmVyZmxvd2Agc2V0IHRvIGBoaWRkZW5gIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuXG5idXR0b24ge1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LCBJRSA4LzkvMTAvMTEsIGFuZCBPcGVyYS5cbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gIGN1cnNvcjogcG9pbnRlcjsgLyogMyAqL1xufVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5cbi8qKlxuICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgcmVzcGVjdCBib3gtc2l6aW5nLCBwYWRkaW5nLCBvciB3aWR0aC5cbiAqXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIGFuZCBDaHJvbWVcbiAqICAgIChpbmNsdWRlIGAtbW96YCB0byBmdXR1cmUtcHJvb2YpLlxuICovXG5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAyICovXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBzZWFyY2ggY2FuY2VsIGJ1dHRvbiBpbiBTYWZhcmkgYW5kIENocm9tZSBvbiBPUyBYLlxuICogU2FmYXJpIChidXQgbm90IENocm9tZSkgY2xpcHMgdGhlIGNhbmNlbCBidXR0b24gd2hlbiB0aGUgc2VhcmNoIGlucHV0IGhhc1xuICogcGFkZGluZyAoYW5kIGB0ZXh0ZmllbGRgIGFwcGVhcmFuY2UpLlxuICovXG5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAqL1xuXG5maWVsZHNldCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XG4gIG1hcmdpbjogMCAycHg7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBjb2xvcmAgbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRSA4LzkvMTAvMTEuXG4gKiAyLiBSZW1vdmUgcGFkZGluZyBzbyBwZW9wbGUgYXJlbid0IGNhdWdodCBvdXQgaWYgdGhleSB6ZXJvIG91dCBmaWVsZHNldHMuXG4gKi9cblxubGVnZW5kIHtcbiAgYm9yZGVyOiAwOyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgOC85LzEwLzExLlxuICovXG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogRG9uJ3QgaW5oZXJpdCB0aGUgYGZvbnQtd2VpZ2h0YCAoYXBwbGllZCBieSBhIHJ1bGUgYWJvdmUpLlxuICogTk9URTogdGhlIGRlZmF1bHQgY2Fubm90IHNhZmVseSBiZSBjaGFuZ2VkIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFguXG4gKi9cblxub3B0Z3JvdXAge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLyogVGFibGVzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSBtb3N0IHNwYWNpbmcgYmV0d2VlbiB0YWJsZSBjZWxscy5cbiAqL1xuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG50ZCxcbnRoIHtcbiAgcGFkZGluZzogMDtcbn1cbiIsIi8qISBub3JtYWxpemUuY3NzIHYzLjAuMiB8IE1JVCBMaWNlbnNlIHwgZ2l0LmlvL25vcm1hbGl6ZSAqL1xuLyoqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuIDIuIFByZXZlbnQgaU9TIHRleHQgc2l6ZSBhZGp1c3QgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlLCB3aXRob3V0IGRpc2FibGluZyB1c2VyIHpvb20uICovXG5odG1sIHsgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi8gLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi8gLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovIH1cblxuLyoqIFJlbW92ZSBkZWZhdWx0IG1hcmdpbi4gKi9cbmJvZHkgeyBtYXJnaW46IDA7IH1cblxuLyogSFRNTDUgZGlzcGxheSBkZWZpbml0aW9ucyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBhbnkgSFRNTDUgZWxlbWVudCBpbiBJRSA4LzkuIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgZGV0YWlsc2Agb3IgYHN1bW1hcnlgIGluIElFIDEwLzExIGFuZCBGaXJlZm94LiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYG1haW5gIGluIElFIDExLiAqL1xuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWFpbiwgbWVudSwgbmF2LCBzZWN0aW9uLCBzdW1tYXJ5IHsgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS4gKi9cbmF1ZGlvLCBjYW52YXMsIHByb2dyZXNzLCB2aWRlbyB7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogMSAqLyB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDIgKi8gfVxuXG4vKiogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy4gUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TIDUgZGV2aWNlcy4gKi9cbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7IGRpc3BsYXk6IG5vbmU7IGhlaWdodDogMDsgfVxuXG4vKiogQWRkcmVzcyBgW2hpZGRlbl1gIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuICovXG5baGlkZGVuXSwgdGVtcGxhdGUgeyBkaXNwbGF5OiBub25lOyB9XG5cbi8qIExpbmtzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKiogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuICovXG5hIHsgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cblxuLyoqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLiAqL1xuYTphY3RpdmUsIGE6aG92ZXIgeyBvdXRsaW5lOiAwOyB9XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKiogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgQ2hyb21lLiAqL1xuYWJiclt0aXRsZV0geyBib3JkZXItYm90dG9tOiAxcHggZG90dGVkOyB9XG5cbi8qKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuICovXG5iLCBzdHJvbmcgeyBmb250LXdlaWdodDogYm9sZDsgfVxuXG4vKiogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIFNhZmFyaSBhbmQgQ2hyb21lLiAqL1xuZGZuIHsgZm9udC1zdHlsZTogaXRhbGljOyB9XG5cbi8qKiBBZGRyZXNzIHZhcmlhYmxlIGBoMWAgZm9udC1zaXplIGFuZCBtYXJnaW4gd2l0aGluIGBzZWN0aW9uYCBhbmQgYGFydGljbGVgIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS4gKi9cbmgxIHsgZm9udC1zaXplOiAyZW07IG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyoqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuICovXG5tYXJrIHsgYmFja2dyb3VuZDogI2ZmMDsgY29sb3I6ICMwMDA7IH1cblxuLyoqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLiAqL1xuc21hbGwgeyBmb250LXNpemU6IDgwJTsgfVxuXG4vKiogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLiAqL1xuc3ViLCBzdXAgeyBmb250LXNpemU6IDc1JTsgbGluZS1oZWlnaHQ6IDA7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1cCB7IHRvcDogLTAuNWVtOyB9XG5cbnN1YiB7IGJvdHRvbTogLTAuMjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKiogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkvMTAuICovXG5pbWcgeyBib3JkZXI6IDA7IH1cblxuLyoqIENvcnJlY3Qgb3ZlcmZsb3cgbm90IGhpZGRlbiBpbiBJRSA5LzEwLzExLiAqL1xuc3ZnOm5vdCg6cm9vdCkgeyBvdmVyZmxvdzogaGlkZGVuOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS4gKi9cbmZpZ3VyZSB7IG1hcmdpbjogMWVtIDQwcHg7IH1cblxuLyoqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy4gKi9cbmhyIHsgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgYm94LXNpemluZzogY29udGVudC1ib3g7IGhlaWdodDogMDsgfVxuXG4vKiogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuICovXG5wcmUgeyBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKiogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLiAqL1xuY29kZSwga2JkLCBwcmUsIHNhbXAgeyBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IGZvbnQtc2l6ZTogMWVtOyB9XG5cbi8qIEZvcm1zID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKiogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWQgc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LiAqL1xuLyoqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZC4gS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuIDIuIENvcnJlY3QgZm9udCBwcm9wZXJ0aWVzIG5vdCBiZWluZyBpbmhlcml0ZWQuIDMuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLiAqL1xuYnV0dG9uLCBpbnB1dCwgb3B0Z3JvdXAsIHNlbGVjdCwgdGV4dGFyZWEgeyBjb2xvcjogaW5oZXJpdDsgLyogMSAqLyBmb250OiBpbmhlcml0OyAvKiAyICovIG1hcmdpbjogMDsgLyogMyAqLyB9XG5cbi8qKiBBZGRyZXNzIGBvdmVyZmxvd2Agc2V0IHRvIGBoaWRkZW5gIGluIElFIDgvOS8xMC8xMS4gKi9cbmJ1dHRvbiB7IG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC4gKi9cbmJ1dHRvbiwgc2VsZWN0IHsgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gIGFuZCBgdmlkZW9gIGNvbnRyb2xzLiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlIGBpbnB1dGAgYW5kIG90aGVycy4gKi9cbmJ1dHRvbiwgaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCBpbnB1dFt0eXBlPVwicmVzZXRcIl0sIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0geyAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqLyBjdXJzb3I6IHBvaW50ZXI7IC8qIDMgKi8gfVxuXG4vKiogUmUtc2V0IGRlZmF1bHQgY3Vyc29yIGZvciBkaXNhYmxlZCBlbGVtZW50cy4gKi9cbmJ1dHRvbltkaXNhYmxlZF0sIGh0bWwgaW5wdXRbZGlzYWJsZWRdIHsgY3Vyc29yOiBkZWZhdWx0OyB9XG5cbi8qKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuICovXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsIGlucHV0OjotbW96LWZvY3VzLWlubmVyIHsgYm9yZGVyOiAwOyBwYWRkaW5nOiAwOyB9XG5cbi8qKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluIHRoZSBVQSBzdHlsZXNoZWV0LiAqL1xuaW5wdXQgeyBsaW5lLWhlaWdodDogbm9ybWFsOyB9XG5cbi8qKiBJdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IGRvbid0IGF0dGVtcHQgdG8gc3R5bGUgdGhlc2UgZWxlbWVudHMuIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguIDEuIEFkZHJlc3MgYm94IHNpemluZyBzZXQgdG8gYGNvbnRlbnQtYm94YCBpbiBJRSA4LzkvMTAuIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuICovXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sIGlucHV0W3R5cGU9XCJyYWRpb1wiXSB7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi8gcGFkZGluZzogMDsgLyogMiAqLyB9XG5cbi8qKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpbiBgZm9udC1zaXplYCB2YWx1ZXMgb2YgdGhlIGBpbnB1dGAsIGl0IGNhdXNlcyB0aGUgY3Vyc29yIHN0eWxlIG9mIHRoZSBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuICovXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLCBpbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHsgaGVpZ2h0OiBhdXRvOyB9XG5cbi8qKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgYW5kIENocm9tZS4gMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgYW5kIENocm9tZSAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS4gKi9cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0geyAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqLyAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAyICovIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyB9XG5cbi8qKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC4gU2FmYXJpIChidXQgbm90IENocm9tZSkgY2xpcHMgdGhlIGNhbmNlbCBidXR0b24gd2hlbiB0aGUgc2VhcmNoIGlucHV0IGhhcyBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHsgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuICovXG5maWVsZHNldCB7IGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7IG1hcmdpbjogMCAycHg7IHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTsgfVxuXG4vKiogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLiAyLiBSZW1vdmUgcGFkZGluZyBzbyBwZW9wbGUgYXJlbid0IGNhdWdodCBvdXQgaWYgdGhleSB6ZXJvIG91dCBmaWVsZHNldHMuICovXG5sZWdlbmQgeyBib3JkZXI6IDA7IC8qIDEgKi8gcGFkZGluZzogMDsgLyogMiAqLyB9XG5cbi8qKiBSZW1vdmUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgOC85LzEwLzExLiAqL1xudGV4dGFyZWEgeyBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKiogRG9uJ3QgaW5oZXJpdCB0aGUgYGZvbnQtd2VpZ2h0YCAoYXBwbGllZCBieSBhIHJ1bGUgYWJvdmUpLiBOT1RFOiB0aGUgZGVmYXVsdCBjYW5ub3Qgc2FmZWx5IGJlIGNoYW5nZWQgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC4gKi9cbm9wdGdyb3VwIHsgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyogVGFibGVzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKiogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLiAqL1xudGFibGUgeyBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyBib3JkZXItc3BhY2luZzogMDsgfVxuXG50ZCwgdGggeyBwYWRkaW5nOiAwOyB9XG5cbi53ZWxjb21lLXVwcGVyLCAud2VsY29tZS1zdWJoZWFkZXIgeyBmb250LWZhbWlseTogXCJTb3VyY2UgU2VyaWYgUHJvXCIsIHNlcmlmOyBmb250LXNpemU6IDE2cHg7IGZvbnQtd2VpZ2h0OiBub3JtYWw7IGxldHRlci1zcGFjaW5nOiAwLjVlbTsgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgfVxuXG5odG1sIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG4qLCAqOmJlZm9yZSwgKjphZnRlciB7IGJveC1zaXppbmc6IGluaGVyaXQ7IH1cblxuaHRtbCwgYm9keSB7IGhlaWdodDogMTAwJTsgfVxuXG5ib2R5IHsgZm9udC1mYW1pbHk6IFwiU291cmNlIFNlcmlmIFByb1wiLCBzZXJpZjsgZm9udC1zaXplOiAxOHB4OyAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgbGluZS1oZWlnaHQ6IDEuNjsgY29sb3I6ICMyMDIyMkM7IHRleHQtYWxpZ246IGNlbnRlcjsgfVxuXG5hIHsgY29sb3I6ICMzMzM7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuXG5wIHsgbWFyZ2luOiAyZW0gMDsgfVxuXG5zdXAgeyBmb250LXNpemU6IDAuOGVtOyB9XG5cbmgxLCBoMiwgaDMgeyBtYXJnaW46IDFyZW0gMDsgZm9udC1mYW1pbHk6IFwiUG9wcGluc1wiLCBzYW5zLXNlcmlmOyBjb2xvcjogI2FhYTsgfVxuXG4ucGFnZS13cmFwIHsgZGlzcGxheTogdGFibGU7IGhlaWdodDogMTAwJTsgbWF4LXdpZHRoOiA3MjBweDsgbWFyZ2luOiAwIGF1dG87IH1cblxuLnBhZ2Utd3JhcC1pbm5lciB7IGRpc3BsYXk6IHRhYmxlLWNlbGw7IHBhZGRpbmc6IDgwcHggMDsgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxuXG4uYnV0dG9uIHsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBwYWRkaW5nOiAxMHB4IDMwcHg7IGxpbmUtaGVpZ2h0OiAxOyB0ZXh0LWFsaWduOiBjZW50ZXI7IGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBib3JkZXI6IDFweCBzb2xpZCAjYWFhOyBib3JkZXItcmFkaXVzOiAzcHg7IH1cblxuLmJ1dHRvbjpob3ZlciB7IGJvcmRlci1jb2xvcjogIzg4ODsgfVxuXG4uYnV0dG9uLXNtYWxsIHsgcGFkZGluZzogNXB4IDEycHg7IGZvbnQtc2l6ZTogMTRweDsgfVxuXG4uYnV0dG9uLWZhZGVkIHsgY29sb3I6ICM4ODg7IGJvcmRlci1jb2xvcjogI2NjYzsgfVxuXG4uYnV0dG9uLWZhZGVkOmhvdmVyIHsgYm9yZGVyLWNvbG9yOiAjYmZiZmJmOyB9XG5cbi5sb2dvdXQgeyBwb3NpdGlvbjogZml4ZWQ7IHJpZ2h0OiAxMHB4OyBib3R0b206IDEwcHg7IGZvbnQtc2l6ZTogMTNweDsgfVxuXG4ubWVzc2FnZSB7IHBhZGRpbmc6IDEwcHggMDsgZm9udC1zaXplOiAxNHB4OyB0ZXh0LWFsaWduOiBjZW50ZXI7IGJhY2tncm91bmQ6ICNmZmY7IH1cblxuLnN0YXRlLW1lc3NhZ2UgeyBtYXJnaW4tYm90dG9tOiAxMHB4OyBmb250LWZhbWlseTogXCJQb3BwaW5zXCIsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMjRweDsgZm9udC13ZWlnaHQ6IDYwMDsgY29sb3I6ICNhYWE7IH1cblxuLnNtYWxsIHsgbWFyZ2luOiAwIDAgMzBweDsgZm9udC1zaXplOiAxNHB4OyBjb2xvcjogIzY2NjsgfVxuXG4uYXNzaWduZWQtaW1nIHsgd2lkdGg6IDE5MnB4OyBib3JkZXItcmFkaXVzOiA1MCU7IGFuaW1hdGlvbi1uYW1lOiBpbWFnZS1wb3A7IGFuaW1hdGlvbi1kdXJhdGlvbjogMC44czsgfVxuXG4uYXNzaWduZWQtbmFtZSB7IG1hcmdpbjogMTBweCAwIDYwcHg7IGZvbnQtZmFtaWx5OiBcIlBvcHBpbnNcIiwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAzNnB4OyBmb250LXdlaWdodDogNjAwOyBjb2xvcjogIzc3QUI5MzsgYW5pbWF0aW9uLW5hbWU6IHNsaWRlLXVwOyBhbmltYXRpb24tZHVyYXRpb246IDAuOHM7IGFuaW1hdGlvbi1kZWxheTogMC43czsgYW5pbWF0aW9uLWZpbGwtbW9kZTogYmFja3dhcmRzOyB9XG5cbi5hc3NpZ25lZC1ub3RlIHsgbWF4LXdpZHRoOiAyNDBweDsgZm9udC1zaXplOiAxM3B4OyBhbmltYXRpb24tbmFtZTogZmFkZS1pbjsgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjZzOyBhbmltYXRpb24tZGVsYXk6IDJzOyBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7IH1cblxuQGtleWZyYW1lcyBpbWFnZS1wb3AgeyAwJSB7IHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgb3BhY2l0eTogMDsgfVxuICAxMDAlIHsgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuQGtleWZyYW1lcyBzbGlkZS11cCB7IDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDMwcHgpO1xuICAgIG9wYWNpdHk6IDA7IH1cbiAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICBvcGFjaXR5OiAxOyB9IH1cblxuQGtleWZyYW1lcyBmYWRlLWluIHsgMCUgeyBvcGFjaXR5OiAwOyB9XG4gIDEwMCUgeyBvcGFjaXR5OiAxOyB9IH1cblxuLm5vdC1hdXRoZWQgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjODg5MUJBOyBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvLzFmZWIxNGYyYWU2YmQ1MDllMzI0LTg2YjdkMGFmN2JjZGM3MDQ3ZjRiNjljNTIwZDdhYWM2LnI1MC5jZjUucmFja2Nkbi5jb20vc2NlbmUuanBnXCIpOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyB9XG5cbi5sb2dpbiB7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiA1MCU7IGxlZnQ6IDUwJTsgd2lkdGg6IDEwMHB4OyBtYXJnaW4tdG9wOiAtMThweDsgbWFyZ2luLWxlZnQ6IC01MHB4OyBiYWNrZ3JvdW5kOiAjZmZmOyBib3JkZXI6IDA7IH1cblxuLndlbGNvbWUtaGVhZGVyIHsgbWFyZ2luLWJvdHRvbTogNjBweDsgfVxuXG4ud2VsY29tZS1oZWFkaW5nIHsgbWFyZ2luOiA0MHB4IDAgOHB4OyBmb250LXdlaWdodDogbm9ybWFsOyB9XG5cbi53ZWxjb21lLXVwcGVyIHsgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxuXG4ud2VsY29tZS10ZXh0IHsgZm9udC1mYW1pbHk6IFwiUG9wcGluc1wiLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDgwcHg7IGZvbnQtd2VpZ2h0OiA3MDA7IGxpbmUtaGVpZ2h0OiAxLjI7IGxldHRlci1zcGFjaW5nOiAwLjA1ZW07IHRleHQtc2hhZG93OiAxcHggMXB4IDAgI2ZmZiwgMnB4IDJweCAwICNmZmYsIDNweCAzcHggI2ZmZiwgNHB4IDRweCAjY2NjOyB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XG5cbi53ZWxjb21lLXRleHQgc3BhbiB7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuXG4ud2VsY29tZS10ZXh0IHNwYW46bnRoLWNoaWxkKG9kZCkgeyBjb2xvcjogIzc3QUI5MzsgfVxuXG4ud2VsY29tZS10ZXh0IHNwYW46bnRoLWNoaWxkKGV2ZW4pIHsgY29sb3I6ICNEMTFGMEE7IH1cblxuLndlbGNvbWUtdGV4dCBzcGFuOm50aC1jaGlsZCgzbikgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTRweCk7IH1cblxuLndlbGNvbWUtdGV4dCBzcGFuOm50aC1jaGlsZCgzbiArIDEpIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDRweCk7IH1cblxuLndlbGNvbWUtdGV4dCBzcGFuOm50aC1jaGlsZCg1bikgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzZGVnKTsgfVxuXG4ud2VsY29tZS10ZXh0IHNwYW46bnRoLWNoaWxkKDVuICsgMSkgeyB0cmFuc2Zvcm06IHJvdGF0ZSgtM2RlZyk7IH1cblxuLndlbGNvbWUtc3ViaGVhZGVyIHsgbWFyZ2luOiAwIDAgNjBweDsgfVxuXG4ud2VsY29tZS1ibHVyYiB7IG1heC13aWR0aDogNDAwcHg7IG1hcmdpbjogMTgwcHggYXV0bzsgZm9udC1zaXplOiAxOHB4OyBmb250LXdlaWdodDogbm9ybWFsOyBjb2xvcjogIzMzMzsgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi5xdWVzdGlvbiB7IG1hcmdpbjogNjBweCAwIDQwcHg7IGZvbnQtZmFtaWx5OiBcIlBvcHBpbnNcIiwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAyNHB4OyBmb250LXdlaWdodDogNTAwOyBjb2xvcjogIzc3QUI5MzsgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi5jaG9pY2UtYnV0dG9uIHsgZGlzcGxheTogYmxvY2s7IHdpZHRoOiAzMDBweDsgcGFkZGluZzogMTRweCAzMHB4OyBtYXJnaW46IDAgYXV0byAyMHB4OyB9XG5cbi5mb3JtLXVzZXItc2VsZWN0IHsgdGV4dC1hbGlnbjogbGVmdDsgfVxuIiwiLndlbGNvbWUtaGVhZGVyIHtcbiAgbWFyZ2luLWJvdHRvbTogNjBweDtcbn1cblxuLndlbGNvbWUtaGVhZGluZyB7XG4gIG1hcmdpbjogNDBweCAwIDhweDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cblxuLndlbGNvbWUtdXBwZXIge1xuICBAZXh0ZW5kICVzbWFsbGNhcHM7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG59XG5cbi53ZWxjb21lLXRleHQge1xuICBmb250LWZhbWlseTogJHNhbnM7XG4gIGZvbnQtc2l6ZTogODBweDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgbGV0dGVyLXNwYWNpbmc6IDAuMDVlbTtcbiAgdGV4dC1zaGFkb3c6IDFweCAxcHggMCAjZmZmLFxuICAgICAgICAgICAgICAgMnB4IDJweCAwICNmZmYsXG4gICAgICAgICAgICAgICAzcHggM3B4ICNmZmYsXG4gICAgICAgICAgICAgICA0cHggNHB4ICNjY2M7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cbiAgc3BhbiB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gICAgJjpudGgtY2hpbGQob2RkKSB7IGNvbG9yOiAkZ3JlZW47IH1cblxuICAgICY6bnRoLWNoaWxkKGV2ZW4pIHsgY29sb3I6ICRyZWQ7IH1cblxuICAgICY6bnRoLWNoaWxkKDNuKSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNHB4KTsgfVxuXG4gICAgJjpudGgtY2hpbGQoM24gKyAxKSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSg0cHgpOyB9XG5cbiAgICAmOm50aC1jaGlsZCg1bikgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzZGVnKTsgfVxuXG4gICAgJjpudGgtY2hpbGQoNW4gKyAxKSB7IHRyYW5zZm9ybTogcm90YXRlKC0zZGVnKTsgfVxuICB9XG59XG5cbi53ZWxjb21lLXN1YmhlYWRlciB7XG4gIEBleHRlbmQgJXNtYWxsY2FwcztcbiAgbWFyZ2luOiAwIDAgNjBweDtcbn1cblxuLndlbGNvbWUtYmx1cmIge1xuICBtYXgtd2lkdGg6IDQwMHB4O1xuICBtYXJnaW46IDE4MHB4IGF1dG87XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgY29sb3I6ICMzMzM7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuXG4ucXVlc3Rpb24ge1xuICBtYXJnaW46IDYwcHggMCA0MHB4O1xuICBmb250LWZhbWlseTogJHNhbnM7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICRncmVlbjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uY2hvaWNlLWJ1dHRvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMzAwcHg7XG4gIHBhZGRpbmc6IDE0cHggMzBweDtcbiAgbWFyZ2luOiAwIGF1dG8gMjBweDtcblxuICAmLm5vIHtcblxuICB9XG59XG4iLCJAaW1wb3J0IFwibm9ybWFsaXplXCI7XG5cbiRzZXJpZjogXCJTb3VyY2UgU2VyaWYgUHJvXCIsIHNlcmlmO1xuJHNhbnM6IFwiUG9wcGluc1wiLCBzYW5zLXNlcmlmO1xuXG4kcmVkOiAjRDExRjBBO1xuJGdyZWVuOiAjNzdBQjkzO1xuXG4lY2xlYXJmaXgge1xuICAmOmFmdGVyIHtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICBjbGVhcjogYm90aDtcbiAgICBjb250ZW50OiBcIlwiO1xuICB9XG59XG5cbiVzbWFsbGNhcHMge1xuICBmb250LWZhbWlseTogJHNlcmlmO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGxldHRlci1zcGFjaW5nOiAwLjVlbTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuQGltcG9ydCBcImdsb2JhbFwiO1xuQGltcG9ydCBcImxvZ2luXCI7XG5AaW1wb3J0IFwid2VsY29tZVwiO1xuQGltcG9ydCBcImFkbWluXCI7XG4iLCJodG1sIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG4qIHtcbiAgJixcbiAgJjpiZWZvcmUsXG4gICY6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XG4gIH1cbn1cblxuaHRtbCxcbmJvZHkgeyBoZWlnaHQ6IDEwMCU7IH1cblxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiAkc2VyaWY7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIGxpbmUtaGVpZ2h0OiAxLjY7XG4gIGNvbG9yOiAjMjAyMjJDO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbmEge1xuICBjb2xvcjogIzMzMztcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5wIHsgbWFyZ2luOiAyZW0gMDsgfVxuXG5zdXAgeyBmb250LXNpemU6IDAuOGVtOyB9XG5cbmgxLFxuaDIsXG5oMyB7XG4gIG1hcmdpbjogMXJlbSAwO1xuICBmb250LWZhbWlseTogJHNhbnM7XG4gIGNvbG9yOiAjYWFhO1xufVxuXG4ucGFnZS13cmFwIHtcbiAgZGlzcGxheTogdGFibGU7XG4gIGhlaWdodDogMTAwJTtcbiAgbWF4LXdpZHRoOiA3MjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi5wYWdlLXdyYXAtaW5uZXIge1xuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICBwYWRkaW5nOiA4MHB4IDA7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5cbi5idXR0b24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmc6IDEwcHggMzBweDtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcblxuICAmOmhvdmVyIHsgYm9yZGVyLWNvbG9yOiAjODg4OyB9XG59XG5cbi5idXR0b24tc21hbGwge1xuICBwYWRkaW5nOiA1cHggMTJweDtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuXG4uYnV0dG9uLWZhZGVkIHtcbiAgY29sb3I6ICM4ODg7XG4gIGJvcmRlci1jb2xvcjogI2NjYztcblxuICAmOmhvdmVyIHsgYm9yZGVyLWNvbG9yOiBkYXJrZW4oI2NjYywgNSUpOyB9XG59XG5cbi5sb2dvdXQge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHJpZ2h0OiAxMHB4O1xuICBib3R0b206IDEwcHg7XG4gIGZvbnQtc2l6ZTogMTNweDtcbn1cblxuLm1lc3NhZ2Uge1xuICBwYWRkaW5nOiAxMHB4IDA7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xufVxuXG5cbi8vIGFzc2lnbm1lbnRcblxuLnN0YXRlLW1lc3NhZ2Uge1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICBmb250LWZhbWlseTogJHNhbnM7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICNhYWE7XG59XG5cbi5zbWFsbCB7XG4gIG1hcmdpbjogMCAwIDMwcHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgY29sb3I6ICM2NjY7XG59XG5cbi5hc3NpZ25lZC1pbWcge1xuICB3aWR0aDogMTkycHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYW5pbWF0aW9uLW5hbWU6IGltYWdlLXBvcDtcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjhzO1xufVxuXG4uYXNzaWduZWQtbmFtZSB7XG4gIG1hcmdpbjogMTBweCAwIDYwcHg7XG4gIGZvbnQtZmFtaWx5OiAkc2FucztcbiAgZm9udC1zaXplOiAzNnB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogJGdyZWVuO1xuICBhbmltYXRpb24tbmFtZTogc2xpZGUtdXA7XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMC44cztcbiAgYW5pbWF0aW9uLWRlbGF5OiAwLjdzO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7XG59XG5cbi5hc3NpZ25lZC1ub3RlIHtcbiAgbWF4LXdpZHRoOiAyNDBweDtcbiAgZm9udC1zaXplOiAxM3B4O1xuICBhbmltYXRpb24tbmFtZTogZmFkZS1pbjtcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjZzO1xuICBhbmltYXRpb24tZGVsYXk6IDJzO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBiYWNrd2FyZHM7XG59XG5cbkBrZXlmcmFtZXMgaW1hZ2UtcG9wIHtcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBzbGlkZS11cCB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMzBweCk7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIGZhZGUtaW4ge1xuICAwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG4iLCIubm90LWF1dGhlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM4ODkxQkE7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi8vMWZlYjE0ZjJhZTZiZDUwOWUzMjQtODZiN2QwYWY3YmNkYzcwNDdmNGI2OWM1MjBkN2FhYzYucjUwLmNmNS5yYWNrY2RuLmNvbS9zY2VuZS5qcGdcIik7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG59XG5cbi5sb2dpbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgd2lkdGg6IDEwMHB4O1xuICBtYXJnaW4tdG9wOiAtMThweDtcbiAgbWFyZ2luLWxlZnQ6IC01MHB4O1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3JkZXI6IDA7XG59XG4iLCIuZm9ybS11c2VyLXNlbGVjdCB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
